#!/bin/bash
# top.cron - add to crontab. All output goes to /tmp/top.cron.log
SCRIPT_VER=1.03
LOGFILE=/tmp/top.cron.log
# Run from /tmp to allow self-update
MYDIR=$(dirname $0)
if [ "${MYDIR}" = "/tmp" ]
then
  # Actual cron singleton
  BAREBASE=$(basename $0 .sh)
  # Launch all worker scripts in background, using a copy
  cd /home/pi
  DATEBASE=$(date +'%Y%m%d')
  cp -p github-scripts/poll-cmd.sh /tmp/${BAREBASE}-poll.sh
  { /tmp/${BAREBASE}-poll.sh; EXITSTATUS=$?; sleep 1; rm -f /tmp/${BAREBASE}*; echo "Cleanup complete for ${BAREBASE}, exit status ${EXITSTATUS}"; } >> /tmp/poll-cmd.out.${DATEBASE} 2>&1 &
  echo "${SCRIPT_VER}: Exiting copy, clean up scheduled for /tmp/${BAREBASE}*"
  # Check for older poll-cmd logs
  for f in /tmp/poll-cmd.out.*
  do
    [ "${f}" = "/tmp/poll-cmd.out.${DATEBASE}" ] || { echo "Removing older log ${f}"; rm -f ${f}; }
  done
else
  # Create copy
  COPYBASE=/tmp/top-cron-$$
  cp -p $0 ${COPYBASE}.sh
  date +'%s' > ${COPYBASE}.start
  # Find most recent copy
  LATEST=99999
  NOW=$(date +'%s')
  for f in /tmp/top-cron-*.start
  do
    if [ $f != ${COPYBASE}.start ]
	then
	  DELTA=$(expr ${NOW} - $(cat $f))
	  [ ${DELTA} -lt ${LATEST} ] && LATEST=${DELTA}
	fi
  done
  # Launch singleton iff latest is at least 180 seconds (3 minutes) old
  if [ ${LATEST} -lt 180 ]
  then
    echo "${SCRIPT_VER}: Previous run ${COPYBASE} still active after ${LATEST}s" >> ${LOGFILE}
	rm -f ${COPYBASE}.*
  else
    echo "${SCRIPT_VER}: Launching ${NOW} using ${COPYBASE}" >> ${LOGFILE}
	exec ${COPYBASE}.sh
  fi
fi
